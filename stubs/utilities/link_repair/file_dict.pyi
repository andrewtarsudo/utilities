# -*- coding: utf-8 -*-
from typing import Iterable, Iterator, NamedTuple
from utilities.common.shared import ADOC_EXTENSION as ADOC_EXTENSION, MD_EXTENSION as MD_EXTENSION, \
    StrPath as StrPath
from utilities.common.errors import LinkRepairInternalLinkAnchorError as LinkRepairInternalLinkAnchorError, \
    LinkRepairLineInvalidTypeError as LinkRepairLineInvalidTypeError
from utilities.common.functions import ReaderMode as ReaderMode, file_reader as file_reader
from utilities.link_repair.const import FileLanguage as FileLanguage, prepare_logging as prepare_logging
from utilities.link_repair.link import Link as Link


class FilePattern(NamedTuple):
    pattern_anchor: str
    pattern_link: str
    pattern_internal_link: str


md_file_pattern: FilePattern
ascii_doc_file_pattern: FilePattern


class Boundary(NamedTuple):
    before: str = ...
    after: str = ...

    def bound(self, value: str): ...


class _InternalLink(NamedTuple):
    index: int
    anchor: str


class FileLinkItem(NamedTuple):
    index: int
    link: Link


class DirFile:
    def __init__(self, root_dir: StrPath, full_path: StrPath) -> None: ...

    def __bool__(self) -> bool: ...

    @property
    def rel_path(self) -> str: ...

    @property
    def full_path(self): ...


class TextFile(DirFile):
    IGNORED_LINKS: tuple[str, ...]

    def __init__(self, root_dir: StrPath, full_path: StrPath, patterns: FilePattern | None = None) -> None: ...

    def __getitem__(self, item): ...

    def __setitem__(self, key, value) -> None: ...

    def __contains__(self, item) -> bool: ...

    def __iter__(self): ...

    def iter_anchors(self) -> Iterator[str]: ...

    def iter_links(self) -> Iterator[FileLinkItem]: ...

    def iter_internal_link_anchors(self) -> Iterator[str]: ...

    def get_internal_links(self, anchor: str | None) -> tuple[_InternalLink, ...] | None: ...

    def update_line(
            self,
            line_number: int | Iterable[int],
            old_line: str,
            new_line: str, *,
            is_boundary: bool = False): ...

    def find_anchor(self, anchor: str) -> list[int]: ...

    @property
    def language(self) -> FileLanguage: ...

    def set_links(self) -> None: ...

    def set_internal_links(self) -> None: ...

    def set_anchors(self) -> None: ...

    def set_imagesdir(self) -> None: ...

    @property
    def content(self): ...


class MdFile(TextFile):
    def __init__(self, root_dir: StrPath, full_path: StrPath) -> None: ...

    def set_anchors(self) -> None: ...

    def set_links(self) -> None: ...

    def set_internal_links(self) -> None: ...


class AsciiDocFile(TextFile):
    def __init__(self, root_dir: StrPath, full_path: StrPath) -> None: ...

    def set_imagesdir(self) -> None: ...

    def set_anchors(self) -> None: ...

    def set_links(self) -> None: ...

    def set_internal_links(self) -> None: ...


def get_file(root_dir: StrPath, full_path: StrPath) -> MdFile | AsciiDocFile: ...


class FileDict:
    def __init__(self, root_dir: StrPath) -> None: ...

    def __contains__(self, item) -> bool: ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __add__(self, other): ...

    def __iter__(self) -> Iterator[DirFile]: ...

    def __getitem__(self, item): ...

    def get(self, item): ...

    def __setitem__(self, key, value) -> None: ...
