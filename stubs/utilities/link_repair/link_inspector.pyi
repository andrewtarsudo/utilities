# -*- coding: utf-8 -*-
from pathlib import Path
from utilities.common.shared import ADOC_EXTENSION as ADOC_EXTENSION, MD_EXTENSION as MD_EXTENSION, \
    StrPath as StrPath
from utilities.link_repair.file_dict import DirFile as DirFile, FileDict as FileDict, TextFile as TextFile
from utilities.link_repair.general_storage import ComponentStorage as ComponentStorage, \
    GeneralStorage as GeneralStorage, Storage as Storage
from utilities.link_repair.internal_link_inspector import InternalLinkInspector as InternalLinkInspector, \
    internal_inspector as internal_inspector
from utilities.link_repair.link import Link as Link


def get_options(path: StrPath) -> tuple[str, ...]: ...


def validate_file_path(path: StrPath) -> bool: ...


class LinkInspector:
    updated_anchors: set[str]

    def __init__(self, storage: Storage | None = None, file_dict: FileDict | None = None) -> None: ...

    def __bool__(self) -> bool: ...

    def preprocess_link(self) -> None: ...

    def base_dir(self) -> Path: ...

    def source_link(self) -> Path: ...

    def source_file(self) -> TextFile: ...

    def destination_file(self) -> DirFile | TextFile: ...

    def inspect_original_link(self) -> None: ...

    def inspect_trivial_options(self) -> None: ...

    def find_in_storage(self, storage: GeneralStorage): ...

    def find_file(self) -> None: ...

    def error_file(self, path: StrPath) -> str: ...

    def inspect_anchor(self) -> None: ...

    def find_proper_anchor(self) -> None: ...

    def set_proper_link(self) -> None: ...

    def compare_links(self) -> bool: ...

    def clear(self) -> None: ...

    @property
    def proper_link(self) -> str | None: ...


link_inspector: LinkInspector
