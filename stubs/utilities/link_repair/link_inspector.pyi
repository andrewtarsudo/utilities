# -*- coding: utf-8 -*-
from pathlib import Path

from utilities.common.shared import StrPath
from utilities.repair_links.file_dict import DirFile, FileDict, TextFile
from utilities.repair_links.general_storage import GeneralStorage, Storage
from utilities.repair_links.link import Link


def get_options(path: StrPath) -> tuple[str, ...]: ...


def validate_file_path(path: StrPath) -> bool: ...


class LinkInspector:
    updated_anchors: set[str]

    def __init__(self, storage: Storage | None = None, file_dict: FileDict | None = None) -> None: ...

    def __bool__(self) -> bool: ...

    def preprocess_link(self) -> None: ...

    def base_dir(self) -> Path: ...

    def source_link(self) -> Path: ...

    def source_file(self) -> TextFile: ...

    def destination_file(self) -> DirFile | TextFile: ...

    def inspect_original_link(self) -> None: ...

    def inspect_trivial_options(self) -> None: ...

    def find_in_storage(self, storage: GeneralStorage): ...

    def find_file(self) -> None: ...

    @property
    def storage(self) -> Storage: ...

    def error_file(self, path: StrPath) -> str: ...

    def inspect_anchor(self) -> None: ...

    def find_proper_anchor(self) -> None: ...

    def set_proper_link(self) -> None: ...

    def compare_links(self) -> bool: ...

    def clear(self) -> None: ...

    @property
    def file_dict(self) -> FileDict: ...

    @property
    def link(self) -> Link: ...

    @property
    def proper_link(self) -> str | None: ...


link_inspector: LinkInspector
