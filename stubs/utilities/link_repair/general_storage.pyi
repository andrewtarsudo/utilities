# -*- coding: utf-8 -*-
from pathlib import Path
from typing import Any, Iterable, Iterator

from utilities.common.shared import StrPath


def unique(values: Iterable[Any] = None) -> list[Any]: ...


def with_parent(path: StrPath) -> str: ...


def with_grandparent(path: StrPath) -> str: ...


class GeneralStorage:
    def __init__(self, root_dir: StrPath) -> None: ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __iter__(self) -> Iterator[Path]: ...

    def join_path(self, path: StrPath) -> Path: ...

    def parent_name(self, path: StrPath) -> str: ...

    def grandparent_name(self, path: StrPath): ...

    def prepare(self) -> None: ...

    @property
    def text_files(self): ...

    @property
    def dir_indexes(self): ...

    @property
    def dirindexes(self): ...

    @property
    def non_text_files(self): ...

    @property
    def root_dir(self): ...


class ComponentStorage(GeneralStorage):
    def __init__(self, root_dir: StrPath, name: str) -> None: ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __contains__(self, item) -> bool: ...


class Storage(GeneralStorage):
    def __init__(self, root_dir: StrPath) -> None: ...

    def prepare(self) -> None: ...

    @property
    def is_empty(self) -> bool: ...

    def get_component_storage(self, name: str) -> ComponentStorage: ...
